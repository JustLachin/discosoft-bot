import discord
from discord.ext import commands
from discord import app_commands
import os
import json
import asyncio
from datetime import datetime

# Helper function to add the standard footer to all embeds
def add_default_footer(embed):
    embed.set_footer(text="gg/discosoft")
    return embed

# Bot configuration with emojis
TICKET_CATEGORIES = [
    {"name": "Genel Destek", "emoji": "‚ùì"},
    {"name": "Teknik Sorun", "emoji": "üîß"},
    {"name": "√ñdeme", "emoji": "üí∞"},
    {"name": "Diƒüer", "emoji": "üìù"}
]

# Check if config file exists, create one if it doesn't
def load_config():
    if not os.path.exists('config.json'):
        default_config = {
            "token": "YOUR_BOT_TOKEN_HERE",
            "ticket_channel_id": None,
            "ticket_counter": 0,
            "staff_role_id": None,
            "ticket_log_channel_id": None,
            "guild_id": None,
            "archive_category_id": None,
            "category_roles": {},  # Map categories to support team role IDs
            "frozen_tickets": [],   # List of frozen ticket channel IDs
            "ticket_owners": {}     # Map ticket channel IDs to user IDs
        }
        with open('config.json', 'w') as f:
            json.dump(default_config, f, indent=4)
        return default_config
    
    with open('config.json', 'r') as f:
        config = json.load(f)
        
    # Rename closed_category_id to archive_category_id if needed
    if "closed_category_id" in config and "archive_category_id" not in config:
        config["archive_category_id"] = config["closed_category_id"]
        del config["closed_category_id"]
        
    # Add category_roles if it doesn't exist in older configs
    if "category_roles" not in config:
        config["category_roles"] = {}
        
    # Add frozen_tickets if it doesn't exist in older configs
    if "frozen_tickets" not in config:
        config["frozen_tickets"] = []
        
    # Add ticket_owners if it doesn't exist in older configs
    if "ticket_owners" not in config:
        config["ticket_owners"] = {}
        
    with open('config.json', 'w') as f:
        json.dump(config, f, indent=4)
            
    return config

config = load_config()

# Initialize bot with intents
intents = discord.Intents.default()
intents.message_content = True
intents.members = True

bot = commands.Bot(command_prefix="!", intents=intents)

# Setup process states
setup_states = {}

# Helper function to send DM to user
async def send_dm_to_user(user_id, message):
    try:
        # Get the user
        user = await bot.fetch_user(user_id)
        if user:
            # Send DM
            await user.send(message)
            return True
    except Exception as e:
        print(f"DM g√∂nderme hatasƒ±: {e}")
        return False

# Ticket Information Modal
class TicketInfoModal(discord.ui.Modal):
    def __init__(self, category, category_emoji):
        super().__init__(title=f"{category_emoji} {category} Talep Formu")
        self.category = category
        self.category_emoji = category_emoji
        
        # Add form inputs
        self.add_item(discord.ui.TextInput(
            label="Adƒ±nƒ±z",
            placeholder="Adƒ±nƒ±zƒ± giriniz",
            custom_id="first_name",
            required=True,
            max_length=50
        ))
        
        self.add_item(discord.ui.TextInput(
            label="Soyadƒ±nƒ±z",
            placeholder="Soyadƒ±nƒ±zƒ± giriniz",
            custom_id="last_name",
            required=True,
            max_length=50
        ))
        
        self.add_item(discord.ui.TextInput(
            label="E-posta Adresiniz",
            placeholder="E-posta adresinizi giriniz",
            custom_id="email",
            required=True,
            max_length=100
        ))
        
        self.add_item(discord.ui.TextInput(
            label="Talep Sebebiniz",
            placeholder="Talebi a√ßma sebebinizi detaylƒ± bir ≈üekilde a√ßƒ±klayƒ±nƒ±z",
            custom_id="reason",
            required=True,
            style=discord.TextStyle.paragraph,
            max_length=1000
        ))
    
    async def on_submit(self, interaction: discord.Interaction):
        # Get form data
        first_name = self.children[0].value
        last_name = self.children[1].value
        email = self.children[2].value
        reason = self.children[3].value
        
        # Create the ticket
        await ticket_manager.create_ticket(
            interaction, 
            self.category, 
            self.category_emoji,
            {
                "first_name": first_name,
                "last_name": last_name,
                "email": email,
                "reason": reason
            }
        )

# Ticket Control Buttons for close/freeze
class TicketControlButtons(discord.ui.View):
    def __init__(self):
        super().__init__(timeout=None)
        
        # Add close button
        close_button = discord.ui.Button(
            label="Talebi Kapat", 
            style=discord.ButtonStyle.danger, 
            custom_id="close_ticket"
        )
        self.add_item(close_button)
        
        # Add freeze button
        freeze_button = discord.ui.Button(
            label="Talebi Dondur", 
            style=discord.ButtonStyle.primary, 
            custom_id="freeze_ticket"
        )
        self.add_item(freeze_button)

# Ticket manager class
class TicketManager:
    def __init__(self, bot):
        self.bot = bot
        self.ticket_counter = config["ticket_counter"]
    
    def save_ticket_counter(self):
        config["ticket_counter"] = self.ticket_counter
        with open('config.json', 'w') as f:
            json.dump(config, f, indent=4)
    
    async def create_ticket(self, interaction, category, emoji, user_info=None):
        self.ticket_counter += 1
        self.save_ticket_counter()
        
        guild = interaction.guild
        user = interaction.user
        
        # Get general staff role
        staff_role = None
        if config["staff_role_id"]:
            staff_role = guild.get_role(config["staff_role_id"])
        
        # Get category-specific support team role
        support_team_role = None
        support_team_mention = ""
        if config["category_roles"] and category in config["category_roles"]:
            role_id = config["category_roles"][category]
            support_team_role = guild.get_role(int(role_id))
            if support_team_role:
                support_team_mention = f"\n\n{support_team_role.mention}, yeni bir destek talebi olu≈üturuldu!"
        
        # Set up permissions
        overwrites = {
            guild.default_role: discord.PermissionOverwrite(read_messages=False),
            user: discord.PermissionOverwrite(read_messages=True, send_messages=True),
            guild.me: discord.PermissionOverwrite(read_messages=True, send_messages=True,
                                                 manage_channels=True, manage_messages=True)
        }
        
        # Add general staff role permissions if it exists
        if staff_role:
            overwrites[staff_role] = discord.PermissionOverwrite(read_messages=True, send_messages=True)
        
        # Add category-specific support team permissions if it exists
        if support_team_role and support_team_role != staff_role:
            overwrites[support_team_role] = discord.PermissionOverwrite(read_messages=True, send_messages=True)
        
        # Create ticket channel
        channel_name = f"talep-{self.ticket_counter}-{user.name}"
        ticket_channel = await guild.create_text_channel(
            name=channel_name,
            overwrites=overwrites,
            reason=f"Talep {user.name} tarafƒ±ndan olu≈üturuldu"
        )
        
        # Store ticket owner in config
        config["ticket_owners"][str(ticket_channel.id)] = user.id
        with open('config.json', 'w') as f:
            json.dump(config, f, indent=4)
        
        # Create initial embed
        embed = discord.Embed(
            title=f"{emoji} Talep #{self.ticket_counter} - {category}",
            description=f"Talep olu≈üturduƒüunuz i√ßin te≈üekk√ºrler, {user.mention}!\nDestek ekibimiz en kƒ±sa s√ºrede sizinle ilgilenecektir.{support_team_mention}",
            color=discord.Color.blue()
        )
        # Add the default footer
        add_default_footer(embed)
        
        # Add user info to embed if provided
        if user_info:
            embed.add_field(name="Adƒ±", value=user_info["first_name"], inline=True)
            embed.add_field(name="Soyadƒ±", value=user_info["last_name"], inline=True)
            embed.add_field(name="E-posta", value=user_info["email"], inline=False)
            embed.add_field(name="Talep Sebebi", value=user_info["reason"], inline=False)
        
        # Create view with ticket control buttons
        view = TicketControlButtons()
        
        await ticket_channel.send(embed=embed, view=view)
        
        # Notify user
        await interaction.response.send_message(f"Talep olu≈üturuldu! {ticket_channel.mention} kanalƒ±nƒ± kontrol edin", ephemeral=True)
        
        # Send DM to user
        await send_dm_to_user(user.id, f"Merhaba {user.name}, talebiniz ≈üu anda a√ßƒ±ktƒ±r. Destek ekibimiz en kƒ±sa s√ºrede size yardƒ±mcƒ± olacaktƒ±r.")
        
        # Log ticket creation if log channel is set
        if config["ticket_log_channel_id"]:
            log_channel = guild.get_channel(config["ticket_log_channel_id"])
            if log_channel:
                log_embed = discord.Embed(
                    title=f"{emoji} Talep Olu≈üturuldu",
                    description=f"Talep #{self.ticket_counter} {user.mention} tarafƒ±ndan olu≈üturuldu\nKategori: {category}",
                    color=discord.Color.green()
                )
                add_default_footer(log_embed)
                if user_info:
                    log_embed.add_field(name="ƒ∞leti≈üim", value=f"{user_info['first_name']} {user_info['last_name']} ({user_info['email']})", inline=False)
                
                # Add support team information
                if support_team_role:
                    log_embed.add_field(name="Destek Ekibi", value=support_team_role.mention, inline=False)
                
                await log_channel.send(embed=log_embed)

# Ticket View with category selection dropdown
class TicketView(discord.ui.View):
    def __init__(self):
        super().__init__(timeout=None)
        
        # Add the dropdown to select ticket category
        self.add_item(CategorySelect())

# Category dropdown for ticket creation
class CategorySelect(discord.ui.Select):
    def __init__(self):
        options = [
            discord.SelectOption(
                label=category["name"], 
                description=f"{category['name']} talebi olu≈ütur",
                emoji=category["emoji"]
            )
            for category in TICKET_CATEGORIES
        ]
        super().__init__(placeholder="Talep kategorisini se√ßin...", min_values=1, max_values=1, options=options, custom_id="category_select")
    
    async def callback(self, interaction: discord.Interaction):
        selected_category = self.values[0]
        
        # Find selected category and emoji
        category_info = next((c for c in TICKET_CATEGORIES if c["name"] == selected_category), None)
        
        if category_info:
            # Show modal form for user info
            await interaction.response.send_modal(TicketInfoModal(category_info["name"], category_info["emoji"]))

# Event listeners
@bot.event
async def on_ready():
    print(f"{bot.user.name} hazƒ±r!")
    try:
        await bot.tree.sync()
        print("Slash komutlarƒ± senkronize edildi!")
    except Exception as e:
        print(f"Komutlarƒ± senkronize ederken hata olu≈ütu: {e}")
    
    # Initialize the ticket manager
    global ticket_manager
    ticket_manager = TicketManager(bot)

# Message handler for setup process
@bot.event
async def on_message(message):
    # Don't respond to bot messages
    if message.author.bot:
        return
    
    # Check if this user is in setup process
    if message.author.id in setup_states and setup_states[message.author.id]["waiting_for_archive_id"]:
        try:
            # Try to parse the category ID
            archive_id = int(message.content.strip())
            
            # Save the archive category ID
            config["archive_category_id"] = archive_id
            with open('config.json', 'w') as f:
                json.dump(config, f, indent=4)
            
            # Get the category and check if it's valid
            archive_category = message.guild.get_channel(archive_id)
            if archive_category and isinstance(archive_category, discord.CategoryChannel):
                # Continue with support team selection process
                setup_data = setup_states[message.author.id]
                setup_data["waiting_for_archive_id"] = False
                
                # Start the support team selection process
                view = SupportTeamSelectionView(bot, setup_data["original_interaction"], archive_category)
                
                # First category to select a role for
                first_category = TICKET_CATEGORIES[0]
                
                embed = discord.Embed(
                    title="Destek Ekibi Se√ßimi",
                    description=f"{first_category['emoji']} **{first_category['name']}** kategorisi i√ßin destek ekibi rol√ºn√º se√ßin veya atlamak i√ßin butona tƒ±klayƒ±n.",
                    color=discord.Color.blue()
                )
                add_default_footer(embed)
                
                await message.channel.send(embed=embed, view=view)
            else:
                # Invalid category
                await message.channel.send("Ge√ßersiz kategori ID'si! L√ºtfen ge√ßerli bir Ar≈üiv Kategorisi ID'si girin.")
                return
                
        except ValueError:
            # Not a valid number
            await message.channel.send("L√ºtfen ge√ßerli bir kategori ID'si girin (sadece sayƒ±).")
            return
    
    # Process commands as usual
    await bot.process_commands(message)

# Button interaction handler
@bot.event
async def on_interaction(interaction):
    if interaction.type == discord.InteractionType.component:
        custom_id = interaction.data.get("custom_id")
        
        if custom_id == "close_ticket":
            # Handle ticket closing
            await handle_close_ticket(interaction)
            
        elif custom_id == "freeze_ticket":
            # Handle ticket freezing/unfreezing
            await handle_freeze_ticket(interaction)

async def handle_close_ticket(interaction):
    channel = interaction.channel
    
    # Check if this is a ticket channel
    if channel.name.startswith("talep-"):
        # Check if archive category is set
        if not config["archive_category_id"]:
            await interaction.response.send_message(
                "Ar≈üiv kategorisi ayarlanmamƒ±≈ü! L√ºtfen bir y√∂neticiden `/ar≈üivkategorisi` komutunu kullanmasƒ±nƒ± isteyin.",
                ephemeral=True
            )
            return
        
        embed = discord.Embed(
            title="Talep Kapatƒ±lƒ±yor",
            description="Bu talep 5 saniye i√ßinde kapatƒ±lacak ve ar≈üive ta≈üƒ±nacak...",
            color=discord.Color.red()
        )
        add_default_footer(embed)
        await interaction.response.send_message(embed=embed)
        
        # Wait 5 seconds then move the channel to archive category
        await asyncio.sleep(5)
        
        try:
            # Get ticket owner ID
            owner_id = None
            if str(channel.id) in config["ticket_owners"]:
                owner_id = config["ticket_owners"][str(channel.id)]
            
            # Get archive category from config
            archive_category = interaction.guild.get_channel(config["archive_category_id"])
            
            if archive_category and isinstance(archive_category, discord.CategoryChannel):
                # Move channel to archive category
                await channel.edit(category=archive_category, reason=f"Talep {interaction.user.name} tarafƒ±ndan kapatƒ±ldƒ±")
                
                # Disable sending messages for everyone except staff
                for target, overwrite in channel.overwrites.items():
                    if isinstance(target, discord.Member) and target.id != bot.user.id:
                        overwrite.send_messages = False
                        await channel.set_permissions(target, overwrite=overwrite)
                
                # Add kapali prefix to channel name
                await channel.edit(name=f"kapali-{channel.name[6:]}")
                
                # Send closed message
                closed_embed = discord.Embed(
                    title="Talep Kapatƒ±ldƒ±",
                    description=f"Bu talep {interaction.user.mention} tarafƒ±ndan kapatƒ±ldƒ±.",
                    color=discord.Color.red()
                )
                add_default_footer(closed_embed)
                await channel.send(embed=closed_embed)
                
                # Send DM to user if we have their ID
                if owner_id:
                    # Get username if possible
                    try:
                        owner = await bot.fetch_user(owner_id)
                        owner_name = owner.name
                    except:
                        owner_name = "Kullanƒ±cƒ±"
                        
                    await send_dm_to_user(owner_id, f"Merhaba {owner_name}, talebiniz kapatƒ±lmƒ±≈ütƒ±r. Te≈üekk√ºr ederiz.")
                
                # If ticket was frozen, remove it from frozen tickets list
                if channel.id in config["frozen_tickets"]:
                    config["frozen_tickets"].remove(channel.id)
                    with open('config.json', 'w') as f:
                        json.dump(config, f, indent=4)
            else:
                # If category isn't found, notify and delete the channel
                error_embed = discord.Embed(
                    title="Hata",
                    description="Ar≈üiv kategorisi bulunamadƒ±! Talep kanalƒ± siliniyor...",
                    color=discord.Color.red()
                )
                add_default_footer(error_embed)
                await channel.send(embed=error_embed)
                await asyncio.sleep(3)
                await channel.delete(reason=f"Talep {interaction.user.name} tarafƒ±ndan kapatƒ±ldƒ± (Ar≈üiv kategorisi bulunamadƒ±)")
        except Exception as e:
            # Log the error and delete the channel
            print(f"Talep kapatma hatasƒ±: {e}")
            await channel.delete(reason=f"Talep {interaction.user.name} tarafƒ±ndan kapatƒ±ldƒ± (Hata: {e})")
        
        # Log ticket closing if log channel is set
        if config["ticket_log_channel_id"]:
            log_channel = interaction.guild.get_channel(config["ticket_log_channel_id"])
            if log_channel:
                log_embed = discord.Embed(
                    title="Talep Kapatƒ±ldƒ±",
                    description=f"Talep {channel.name} {interaction.user.mention} tarafƒ±ndan kapatƒ±ldƒ±",
                    color=discord.Color.red()
                )
                add_default_footer(log_embed)
                await log_channel.send(embed=log_embed)

async def handle_freeze_ticket(interaction):
    channel = interaction.channel
    
    # Check if this is a ticket channel
    if channel.name.startswith("talep-"):
        # Check if user has permission (staff or support team)
        has_permission = False
        
        # Check if user is admin
        if interaction.user.guild_permissions.administrator:
            has_permission = True
            
        # Check if user has staff role
        if not has_permission and config["staff_role_id"]:
            staff_role = interaction.guild.get_role(config["staff_role_id"])
            if staff_role and staff_role in interaction.user.roles:
                has_permission = True
                
        # Check if user has any of the support team roles
        if not has_permission:
            for category, role_id in config["category_roles"].items():
                role = interaction.guild.get_role(int(role_id))
                if role and role in interaction.user.roles:
                    has_permission = True
                    break
        
        if not has_permission:
            await interaction.response.send_message("Bu i≈ülemi yapmak i√ßin yetkiniz yok!", ephemeral=True)
            return
        
        # Check if channel is already frozen or not
        is_frozen = channel.id in config["frozen_tickets"]
        
        # Get ticket owner ID
        owner_id = None
        if str(channel.id) in config["ticket_owners"]:
            owner_id = config["ticket_owners"][str(channel.id)]
        
        # Toggle frozen state
        if is_frozen:
            # Unfreeze the ticket
            config["frozen_tickets"].remove(channel.id)
            
            # Update permissions to allow messages again
            for target, overwrite in channel.overwrites.items():
                if isinstance(target, discord.Member) and target.id != bot.user.id and target.id != interaction.guild.me.id:
                    # Restore original permissions (allow regular users to send messages)
                    if not target.guild_permissions.administrator and not any(role.id == config["staff_role_id"] for role in target.roles):
                        # Check if user is not staff/admin, enable messaging
                        overwrite.send_messages = True
                        await channel.set_permissions(target, overwrite=overwrite)
            
            # Send notification
            embed = discord.Embed(
                title="Talep A√ßƒ±ldƒ±",
                description=f"Bu talep {interaction.user.mention} tarafƒ±ndan a√ßƒ±ldƒ±. Artƒ±k mesaj g√∂nderebilirsiniz.",
                color=discord.Color.green()
            )
            add_default_footer(embed)
            await interaction.response.send_message(embed=embed)
            
            # Send DM to user if we have their ID
            if owner_id:
                # Get username if possible
                try:
                    owner = await bot.fetch_user(owner_id)
                    owner_name = owner.name
                except:
                    owner_name = "Kullanƒ±cƒ±"
                    
                await send_dm_to_user(owner_id, f"Merhaba {owner_name}, talebiniz ≈üu anda a√ßƒ±ktƒ±r. Artƒ±k mesaj g√∂nderebilirsiniz.")
            
            # Update button to show "Talebi Dondur"
            view = TicketControlButtons()
            await interaction.message.edit(view=view)
            
        else:
            # Freeze the ticket
            config["frozen_tickets"].append(channel.id)
            
            # Update permissions to prevent regular users from sending messages
            for target, overwrite in channel.overwrites.items():
                if isinstance(target, discord.Member) and target.id != bot.user.id and target.id != interaction.guild.me.id:
                    # If member is not staff/admin, disable messaging
                    if not target.guild_permissions.administrator and not any(role.id == config["staff_role_id"] for role in target.roles):
                        overwrite.send_messages = False
                        await channel.set_permissions(target, overwrite=overwrite)
            
            # Send notification
            embed = discord.Embed(
                title="Talep Donduruldu",
                description=f"Bu talep {interaction.user.mention} tarafƒ±ndan donduruldu. ≈ûu anda mesaj g√∂nderemezsiniz.",
                color=discord.Color.yellow()
            )
            add_default_footer(embed)
            await interaction.response.send_message(embed=embed)
            
            # Send DM to user if we have their ID
            if owner_id:
                # Get username if possible
                try:
                    owner = await bot.fetch_user(owner_id)
                    owner_name = owner.name
                except:
                    owner_name = "Kullanƒ±cƒ±"
                    
                await send_dm_to_user(owner_id, f"Merhaba {owner_name}, talebiniz ≈üu anda dondurulmu≈ütur. Ge√ßici olarak mesaj g√∂nderemezsiniz.")
            
            # Update button to show "Talebi A√ß"
            unfreeze_view = discord.ui.View(timeout=None)
            unfreeze_button = discord.ui.Button(
                label="Talebi A√ß", 
                style=discord.ButtonStyle.success, 
                custom_id="freeze_ticket"
            )
            close_button = discord.ui.Button(
                label="Talebi Kapat", 
                style=discord.ButtonStyle.danger, 
                custom_id="close_ticket"
            )
            unfreeze_view.add_item(close_button)
            unfreeze_view.add_item(unfreeze_button)
            
        # Save frozen state
        with open('config.json', 'w') as f:
            json.dump(config, f, indent=4)
        
        # Log ticket freezing if log channel is set
        if config["ticket_log_channel_id"]:
            log_channel = interaction.guild.get_channel(config["ticket_log_channel_id"])
            if log_channel:
                action = "a√ßƒ±ldƒ±" if is_frozen else "donduruldu"
                log_embed = discord.Embed(
                    title=f"Talep {action.capitalize()}",
                    description=f"Talep {channel.name} {interaction.user.mention} tarafƒ±ndan {action}",
                    color=discord.Color.yellow()
                )
                add_default_footer(log_embed)
                await log_channel.send(embed=log_embed)

# Support Team Selection View for setup
class SupportTeamSelectionView(discord.ui.View):
    def __init__(self, bot, interaction, archive_category):
        super().__init__(timeout=300)  # 5 minute timeout
        self.bot = bot
        self.original_interaction = interaction
        self.archive_category = archive_category
        self.category_roles = {}
        self.current_category_index = 0
        self.setup_complete = False
        # Add the first dropdown to select support team for first category
        self.update_view()

    def update_view(self):
        # Clear existing items
        self.clear_items()
        
        # If we've gone through all categories, we're done
        if self.current_category_index >= len(TICKET_CATEGORIES):
            self.setup_complete = True
            return
        
        # Get current category
        category = TICKET_CATEGORIES[self.current_category_index]
        
        # Add role selection dropdown for the current category
        self.add_item(RoleSelect(category["name"], category["emoji"]))
        
        # Add a skip button
        skip_button = discord.ui.Button(
            label="Bu kategori i√ßin ekip atama", 
            style=discord.ButtonStyle.secondary,
            custom_id=f"skip_{category['name']}"
        )
        skip_button.callback = self.skip_category
        self.add_item(skip_button)
    
    async def skip_category(self, interaction):
        # Move to the next category
        self.current_category_index += 1
        
        if self.current_category_index >= len(TICKET_CATEGORIES):
            # All categories processed
            await self.finish_setup(interaction)
        else:
            # Update the view for the next category
            self.update_view()
            
            # Show the next category's selection
            category = TICKET_CATEGORIES[self.current_category_index]
            embed = discord.Embed(
                title="Destek Ekibi Se√ßimi",
                description=f"{category['emoji']} **{category['name']}** kategorisi i√ßin destek ekibi rol√ºn√º se√ßin veya atlamak i√ßin butona tƒ±klayƒ±n.",
                color=discord.Color.blue()
            )
            add_default_footer(embed)
            await interaction.response.edit_message(embed=embed, view=self)
    
    async def finish_setup(self, interaction):
        # Save the category roles to config
        config["category_roles"] = self.category_roles
        with open('config.json', 'w') as f:
            json.dump(config, f, indent=4)
        
        # Continue with the rest of the setup
        # Create ticket message with button
        embed = discord.Embed(
            title="üé´ Destek Talepleri",
            description="Yardƒ±ma mƒ± ihtiyacƒ±nƒ±z var? A≈üaƒüƒ±dan bir kategori se√ßerek talep olu≈üturun!",
            color=discord.Color.blue()
        )
        
        # Show available categories with emojis
        categories_text = "\n".join([f"{cat['emoji']} **{cat['name']}**" for cat in TICKET_CATEGORIES])
        embed.add_field(name="Mevcut Kategoriler", value=categories_text, inline=False)
        
        # Add credit line in footer
        add_default_footer(embed)
        
        # Create and send the view with the category dropdown
        view = TicketView()
        
        await interaction.response.edit_message(content="Kurulum tamamlanƒ±yor...", embed=None, view=None)
        message = await self.original_interaction.channel.send(embed=embed, view=view)
        
        # Save the ticket channel ID
        config["ticket_channel_id"] = self.original_interaction.channel.id
        with open('config.json', 'w') as f:
            json.dump(config, f, indent=4)
        
        # Build the completion message
        setup_msg = f"Talep sistemi bu kanalda kuruldu! Kapatƒ±lan talepler {self.archive_category.mention} kategorisine ta≈üƒ±nacak.\n\n"
        setup_msg += "**Destek Ekipleri:**\n"
        for cat in TICKET_CATEGORIES:
            cat_name = cat["name"]
            if cat_name in self.category_roles:
                role = self.original_interaction.guild.get_role(int(self.category_roles[cat_name]))
                if role:
                    setup_msg += f"{cat['emoji']} {cat_name}: {role.mention}\n"
                else:
                    setup_msg += f"{cat['emoji']} {cat_name}: Rol bulunamadƒ±\n"
            else:
                setup_msg += f"{cat['emoji']} {cat_name}: Atanmamƒ±≈ü\n"
        
        # Add log channel setup reminder
        setup_msg += "\n\n**√ñnemli:** L√ºtfen `/logkanal` komutunu kullanarak log kanalƒ±nƒ± ayarlayƒ±nƒ±z!"
        
        # Send the setup message privately to the user who did the setup - try multiple methods
        sent_successfully = False
        
        # Method 1: Try direct DM to user
        try:
            await self.original_interaction.user.send(setup_msg)
            sent_successfully = True
            print("Sent setup info via DM")
        except Exception as e:
            print(f"DM sending error: {e}")
        
        # Method 2: Try interaction followup with ephemeral=True
        if not sent_successfully:
            try:
                await interaction.followup.send(setup_msg, ephemeral=True)
                sent_successfully = True
                print("Sent setup info via interaction followup")
            except Exception as e:
                print(f"Interaction followup error: {e}")
        
        # Method 3: Try original interaction followup
        if not sent_successfully:
            try:
                await self.original_interaction.followup.send(setup_msg, ephemeral=True)
                sent_successfully = True
                print("Sent setup info via original interaction followup")
            except Exception as e:
                print(f"Original interaction followup error: {e}")
        
        # Method 4: Last resort - send in channel but delete after a few seconds
        if not sent_successfully:
            try:
                temp_msg = await self.original_interaction.channel.send(
                    f"{self.original_interaction.user.mention} Kurulum bilgileri (10 saniye sonra silinecek):\n\n{setup_msg}"
                )
                await asyncio.sleep(10)
                try:
                    await temp_msg.delete()
                except:
                    pass
                print("Sent setup info via temporary channel message")
            except Exception as e:
                print(f"Channel message error: {e}")
        
        # Mark view as complete so it stops listening
        self.stop()
        
        # Clean up setup state
        if self.original_interaction.user.id in setup_states:
            del setup_states[self.original_interaction.user.id]
            
        # Wait 3 seconds, then ask for log channel setup
        await asyncio.sleep(3)
        await self.original_interaction.channel.send(
            f"{self.original_interaction.user.mention}, ≈üimdi loglarƒ±n g√∂nderileceƒüi kanalƒ± ayarlamak i√ßin l√ºtfen `/logkanal #kanal-adƒ±` komutunu kullanƒ±n.",
            delete_after=30
        )

# Role selection dropdown for support team setup
class RoleSelect(discord.ui.RoleSelect):
    def __init__(self, category_name, category_emoji):
        super().__init__(
            placeholder=f"{category_emoji} {category_name} i√ßin destek ekibi rol√ºn√º se√ßin",
            min_values=1,
            max_values=1
        )
        self.category_name = category_name
        self.category_emoji = category_emoji
    
    async def callback(self, interaction: discord.Interaction):
        # Store the selected role for this category
        view = self.view
        view.category_roles[self.category_name] = str(self.values[0].id)
        
        # Move to the next category
        view.current_category_index += 1
        
        if view.current_category_index >= len(TICKET_CATEGORIES):
            # All categories processed
            await view.finish_setup(interaction)
        else:
            # Update the view for the next category
            view.update_view()
            
            # Show the next category's selection
            category = TICKET_CATEGORIES[view.current_category_index]
            embed = discord.Embed(
                title="Destek Ekibi Se√ßimi",
                description=f"{category['emoji']} **{category['name']}** kategorisi i√ßin destek ekibi rol√ºn√º se√ßin veya atlamak i√ßin butona tƒ±klayƒ±n.",
                color=discord.Color.blue()
            )
            add_default_footer(embed)
            await interaction.response.edit_message(embed=embed, view=view)

# Commands
@bot.tree.command(name="kurulum", description="Talep sistemini kur")
@app_commands.default_permissions(administrator=True)
async def setup(interaction: discord.Interaction):
    # Save guild ID for future reference
    config["guild_id"] = interaction.guild.id
    
    # Store setup state for this user
    setup_states[interaction.user.id] = {
        "waiting_for_archive_id": True,
        "original_interaction": interaction
    }
    
    # Ask for archive category ID
    await interaction.response.send_message("L√ºtfen ar≈üivlenecek kategorinin ID bilgisini yazƒ±nƒ±z.")

@bot.tree.command(name="yetkilirol", description="Taleplere eri≈üebilecek genel yetkili rol√ºn√º ayarla")
@app_commands.describe(role="T√ºm taleplere eri≈üimi olacak rol")
@app_commands.default_permissions(administrator=True)
async def setstaffrole(interaction: discord.Interaction, role: discord.Role):
    config["staff_role_id"] = role.id
    with open('config.json', 'w') as f:
        json.dump(config, f, indent=4)
    
    embed = discord.Embed(
        title="Yetkili Rol√º Ayarlandƒ±",
        description=f"Genel yetkili rol√º {role.mention} olarak ayarlandƒ±! Bu rol t√ºm talep t√ºrlerine eri≈üebilecek.",
        color=discord.Color.blue()
    )
    add_default_footer(embed)
    await interaction.response.send_message(embed=embed, ephemeral=True)

@bot.tree.command(name="logkanal", description="Talep loglarƒ±nƒ±n g√∂nderileceƒüi kanalƒ± ayarla")
@app_commands.describe(channel="Talep loglarƒ±nƒ±n g√∂nderileceƒüi kanal")
@app_commands.default_permissions(administrator=True)
async def setlogchannel(interaction: discord.Interaction, channel: discord.TextChannel):
    config["ticket_log_channel_id"] = channel.id
    with open('config.json', 'w') as f:
        json.dump(config, f, indent=4)
    
    embed = discord.Embed(
        title="Log Kanalƒ± Ayarlandƒ±",
        description=f"Log kanalƒ± {channel.mention} olarak ayarlandƒ±!",
        color=discord.Color.blue()
    )
    add_default_footer(embed)
    await interaction.response.send_message(embed=embed, ephemeral=True)

@bot.tree.command(name="ar≈üivkategorisi", description="Ar≈üivlenecek taleplerin ta≈üƒ±nacaƒüƒ± kategoriyi ayarla")
@app_commands.describe(category="Ar≈üivlenecek taleplerin ta≈üƒ±nacaƒüƒ± kategori")
@app_commands.default_permissions(administrator=True)
async def setarchivecategory(interaction: discord.Interaction, category: discord.CategoryChannel):
    config["archive_category_id"] = category.id
    with open('config.json', 'w') as f:
        json.dump(config, f, indent=4)
    
    embed = discord.Embed(
        title="Ar≈üiv Kategorisi Ayarlandƒ±",
        description=f"Ar≈üiv kategorisi {category.mention} olarak ayarlandƒ±!",
        color=discord.Color.green()
    )
    add_default_footer(embed)
    await interaction.response.send_message(embed=embed, ephemeral=True)

@bot.tree.command(name="destekekibi", description="Belirli bir talep kategorisi i√ßin destek ekibi rol√ºn√º ayarla")
@app_commands.choices(category=[
    app_commands.Choice(name=cat["name"], value=cat["name"]) 
    for cat in TICKET_CATEGORIES
])
@app_commands.describe(
    category="Destek ekibi atanacak talep kategorisi",
    role="Bu kategori i√ßin atanacak destek ekibi rol√º"
)
@app_commands.default_permissions(administrator=True)
async def setsupportteam(
    interaction: discord.Interaction, 
    category: str,
    role: discord.Role
):
    # Save the support team role for this category
    if "category_roles" not in config:
        config["category_roles"] = {}
    
    config["category_roles"][category] = str(role.id)
    with open('config.json', 'w') as f:
        json.dump(config, f, indent=4)
    
    # Find the category emoji
    category_info = next((c for c in TICKET_CATEGORIES if c["name"] == category), None)
    emoji = category_info["emoji"] if category_info else "üé´"
    
    embed = discord.Embed(
        title="Destek Ekibi Ayarlandƒ±",
        description=f"{emoji} **{category}** kategorisi i√ßin destek ekibi rol√º {role.mention} olarak ayarlandƒ±!",
        color=discord.Color.blue()
    )
    add_default_footer(embed)
    await interaction.response.send_message(embed=embed, ephemeral=True)

# Y√∂netim Kategorileri
YONETIM_CATEGORIES = [
    {"name": "Destek Sistemi", "emoji": "üé´", "description": "Talep/destek sistemi y√∂netimi"},
    {"name": "Moderasyon Komutlarƒ±", "emoji": "üî®", "description": "Sunucu moderasyon komutlarƒ±"}
]

# Y√∂netim Kategori Se√ßimi Dropdown
class YonetimCategorySelect(discord.ui.Select):
    def __init__(self):
        options = [
            discord.SelectOption(
                label=category["name"],
                description=category["description"],
                emoji=category["emoji"]
            )
            for category in YONETIM_CATEGORIES
        ]
        super().__init__(placeholder="Y√∂netim kategorisini se√ßin...", min_values=1, max_values=1, options=options)
    
    async def callback(self, interaction: discord.Interaction):
        selected_category = self.values[0]
        
        if selected_category == "Destek Sistemi":
            await handle_destek_sistemi(interaction)
        elif selected_category == "Moderasyon Komutlarƒ±":
            await handle_moderasyon_komutlari(interaction)
        else:
            await interaction.response.send_message("Ge√ßersiz kategori se√ßildi.", ephemeral=True)

# Y√∂netim View
class YonetimView(discord.ui.View):
    def __init__(self):
        super().__init__(timeout=180)  # 3 dakika timeout
        self.add_item(YonetimCategorySelect())

# Destek Sistemi Handler
async def handle_destek_sistemi(interaction: discord.Interaction):
    # Destek sistemi y√∂netim se√ßenekleri
    embed = discord.Embed(
        title="üé´ Destek Sistemi Y√∂netimi",
        description="Destek sistemi ile ilgili komutlar:",
        color=discord.Color.blue()
    )
    
    commands = [
        {"name": "/kurulum", "description": "Talep sistemini kurma"},
        {"name": "/yetkilirol", "description": "Yetkili rol√ºn√º ayarlama"},
        {"name": "/logkanal", "description": "Log kanalƒ±nƒ± ayarlama"},
        {"name": "/ar≈üivkategorisi", "description": "Ar≈üiv kategorisini ayarlama"},
        {"name": "/destekekibi", "description": "Kategori bazlƒ± destek ekibi atama"}
    ]
    
    for cmd in commands:
        embed.add_field(name=cmd["name"], value=cmd["description"], inline=False)
    
    add_default_footer(embed)
    await interaction.response.send_message(embed=embed, ephemeral=True)

# Moderasyon Komutlarƒ± Handler
async def handle_moderasyon_komutlari(interaction: discord.Interaction):
    # Moderasyon komutlarƒ± se√ßenekleri
    embed = discord.Embed(
        title="üî® Moderasyon Komutlarƒ±",
        description="A≈üaƒüƒ±daki moderasyon komutlarƒ±nƒ± kullanabilirsiniz:",
        color=discord.Color.red()
    )
    
    commands = [
        {"name": "/at", "description": "Kullanƒ±cƒ±yƒ± sunucudan at (kick)"},
        {"name": "/yasakla", "description": "Kullanƒ±cƒ±yƒ± sunucudan yasakla (ban)"},
        {"name": "/sustur", "description": "Kullanƒ±cƒ±yƒ± belirli bir s√ºre sustur"},
        {"name": "/temizle", "description": "Belirli sayƒ±da mesajƒ± sil"},
        {"name": "/uyarƒ±", "description": "Kullanƒ±cƒ±ya uyarƒ± ver"}
    ]
    
    for cmd in commands:
        embed.add_field(name=cmd["name"], value=cmd["description"], inline=False)
    
    add_default_footer(embed)
    await interaction.response.send_message(embed=embed, ephemeral=True)

# Y√∂netim Komutu
@bot.tree.command(name="yonetim", description="Sunucu y√∂netim paneline eri≈üin")
@app_commands.default_permissions(administrator=True)
async def yonetim(interaction: discord.Interaction):
    view = YonetimView()
    
    embed = discord.Embed(
        title="‚öôÔ∏è Sunucu Y√∂netim Paneli",
        description="A≈üaƒüƒ±daki kategorilerden birini se√ßerek ilgili y√∂netim komutlarƒ±na eri≈üebilirsiniz.",
        color=discord.Color.gold()
    )
    
    # Kategorileri listele
    categories_text = "\n".join([f"{cat['emoji']} **{cat['name']}**: {cat['description']}" for cat in YONETIM_CATEGORIES])
    embed.add_field(name="Mevcut Kategoriler", value=categories_text, inline=False)
    
    add_default_footer(embed)
    await interaction.response.send_message(embed=embed, view=view, ephemeral=True)

# Kullanƒ±cƒ± at (kick) komutu
@bot.tree.command(name="at", description="Bir kullanƒ±cƒ±yƒ± sunucudan at")
@app_commands.describe(
    kullanici="Atƒ±lacak kullanƒ±cƒ±",
    sebep="Atƒ±lma sebebi (isteƒüe baƒülƒ±)"
)
@app_commands.default_permissions(kick_members=True)
async def kick(interaction: discord.Interaction, kullanici: discord.Member, sebep: str = None):
    # Kendini veya botlarƒ± atamaz
    if kullanici == interaction.user:
        await interaction.response.send_message("Kendinizi atamazsƒ±nƒ±z!", ephemeral=True)
        return
    
    if kullanici.bot:
        await interaction.response.send_message("Botlarƒ± atamazsƒ±nƒ±z!", ephemeral=True)
        return
    
    # Yetkili kontrol√º
    if kullanici.top_role >= interaction.user.top_role and interaction.user.id != interaction.guild.owner_id:
        await interaction.response.send_message("Bu kullanƒ±cƒ±yƒ± atmak i√ßin yetkiniz yok! Sizden daha y√ºksek ya da aynƒ± yetkide.", ephemeral=True)
        return
    
    # Kullanƒ±cƒ±yƒ± at
    reason = f"{interaction.user} tarafƒ±ndan atƒ±ldƒ±: {sebep}" if sebep else f"{interaction.user} tarafƒ±ndan atƒ±ldƒ±"
    
    try:
        await kullanici.kick(reason=reason)
        
        # Ba≈üarƒ±lƒ± kick mesajƒ±
        embed = discord.Embed(
            title="üë¢ Kullanƒ±cƒ± Atƒ±ldƒ±",
            description=f"{kullanici.mention} sunucudan atƒ±ldƒ±.",
            color=discord.Color.orange()
        )
        embed.add_field(name="Sebep", value=sebep or "Sebep belirtilmedi", inline=False)
        embed.set_footer(text=f"{interaction.user} tarafƒ±ndan atƒ±ldƒ±")
        add_default_footer(embed)
        
        await interaction.response.send_message(embed=embed, ephemeral=False)
        
        # DM olarak bildirim g√∂ndermeye √ßalƒ±≈ü
        try:
            dm_embed = discord.Embed(
                title=f"üë¢ {interaction.guild.name} sunucusundan atƒ±ldƒ±nƒ±z",
                description=f"Yetkili: {interaction.user.mention}",
                color=discord.Color.red()
            )
            dm_embed.add_field(name="Sebep", value=sebep or "Sebep belirtilmedi", inline=False)
            add_default_footer(dm_embed)
            
            await kullanici.send(embed=dm_embed)
        except:
            pass
        
    except discord.Forbidden:
        await interaction.response.send_message("Bu kullanƒ±cƒ±yƒ± atmak i√ßin yeterli yetkiye sahip deƒüilim!", ephemeral=True)
    except Exception as e:
        await interaction.response.send_message(f"Bir hata olu≈ütu: {e}", ephemeral=True)

# Kullanƒ±cƒ± yasakla (ban) komutu
@bot.tree.command(name="yasakla", description="Bir kullanƒ±cƒ±yƒ± sunucudan yasakla")
@app_commands.describe(
    kullanici="Yasaklanacak kullanƒ±cƒ±",
    sebep="Yasaklanma sebebi (isteƒüe baƒülƒ±)",
    mesaj_sil="Son X g√ºn i√ßindeki mesajlarƒ± sil (0-7 g√ºn)"
)
@app_commands.choices(mesaj_sil=[
    app_commands.Choice(name="Silme", value=0),
    app_commands.Choice(name="Son 1 g√ºn", value=1),
    app_commands.Choice(name="Son 3 g√ºn", value=3),
    app_commands.Choice(name="Son 7 g√ºn", value=7)
])
@app_commands.default_permissions(ban_members=True)
async def ban(interaction: discord.Interaction, kullanici: discord.Member, sebep: str = None, mesaj_sil: int = 0):
    # Kendini veya botlarƒ± yasaklayamaz
    if kullanici == interaction.user:
        await interaction.response.send_message("Kendinizi yasaklayamazsƒ±nƒ±z!", ephemeral=True)
        return
    
    if kullanici.bot:
        await interaction.response.send_message("Botlarƒ± yasaklayamazsƒ±nƒ±z!", ephemeral=True)
        return
    
    # Yetkili kontrol√º
    if kullanici.top_role >= interaction.user.top_role and interaction.user.id != interaction.guild.owner_id:
        await interaction.response.send_message("Bu kullanƒ±cƒ±yƒ± yasaklamak i√ßin yetkiniz yok! Sizden daha y√ºksek ya da aynƒ± yetkide.", ephemeral=True)
        return
    
    # Kullanƒ±cƒ±yƒ± yasakla
    reason = f"{interaction.user} tarafƒ±ndan yasaklandƒ±: {sebep}" if sebep else f"{interaction.user} tarafƒ±ndan yasaklandƒ±"
    
    try:
        # DM olarak bildirim g√∂ndermeye √ßalƒ±≈ü
        try:
            dm_embed = discord.Embed(
                title=f"üö´ {interaction.guild.name} sunucusundan yasaklandƒ±nƒ±z",
                description=f"Yetkili: {interaction.user.mention}",
                color=discord.Color.red()
            )
            dm_embed.add_field(name="Sebep", value=sebep or "Sebep belirtilmedi", inline=False)
            add_default_footer(dm_embed)
            
            await kullanici.send(embed=dm_embed)
        except:
            pass
        
        # Kullanƒ±cƒ±yƒ± yasakla
        await kullanici.ban(reason=reason, delete_message_days=mesaj_sil)
        
        # Ba≈üarƒ±lƒ± ban mesajƒ±
        embed = discord.Embed(
            title="üö´ Kullanƒ±cƒ± Yasaklandƒ±",
            description=f"{kullanici.mention} sunucudan yasaklandƒ±.",
            color=discord.Color.red()
        )
        embed.add_field(name="Sebep", value=sebep or "Sebep belirtilmedi", inline=False)
        embed.add_field(name="Silinen Mesajlar", value=f"Son {mesaj_sil} g√ºn" if mesaj_sil > 0 else "Mesaj silinmedi", inline=False)
        embed.set_footer(text=f"{interaction.user} tarafƒ±ndan yasaklandƒ±")
        add_default_footer(embed)
        
        await interaction.response.send_message(embed=embed, ephemeral=False)
        
    except discord.Forbidden:
        await interaction.response.send_message("Bu kullanƒ±cƒ±yƒ± yasaklamak i√ßin yeterli yetkiye sahip deƒüilim!", ephemeral=True)
    except Exception as e:
        await interaction.response.send_message(f"Bir hata olu≈ütu: {e}", ephemeral=True)

# Susturma (timeout) komutu
@bot.tree.command(name="sustur", description="Bir kullanƒ±cƒ±yƒ± belirli bir s√ºre i√ßin sustur")
@app_commands.describe(
    kullanici="Susturulacak kullanƒ±cƒ±",
    sure="Susturma s√ºresi (dakika)",
    sebep="Susturulma sebebi (isteƒüe baƒülƒ±)"
)
@app_commands.default_permissions(moderate_members=True)
async def timeout(interaction: discord.Interaction, kullanici: discord.Member, sure: int, sebep: str = None):
    # Kendini veya botlarƒ± susturamaz
    if kullanici == interaction.user:
        await interaction.response.send_message("Kendinizi susturamazsƒ±nƒ±z!", ephemeral=True)
        return
    
    if kullanici.bot:
        await interaction.response.send_message("Botlarƒ± susturamazsƒ±nƒ±z!", ephemeral=True)
        return
    
    # Yetkili kontrol√º
    if kullanici.top_role >= interaction.user.top_role and interaction.user.id != interaction.guild.owner_id:
        await interaction.response.send_message("Bu kullanƒ±cƒ±yƒ± susturmak i√ßin yetkiniz yok! Sizden daha y√ºksek ya da aynƒ± yetkide.", ephemeral=True)
        return
    
    # S√ºre kontrol√º (maksimum 28 g√ºn)
    if sure <= 0:
        await interaction.response.send_message("Ge√ßerli bir s√ºre girmelisiniz!", ephemeral=True)
        return
    
    if sure > 40320:  # 28 g√ºn (dakika olarak)
        await interaction.response.send_message("Maksimum susturma s√ºresi 28 g√ºnd√ºr!", ephemeral=True)
        return
    
    # Kullanƒ±cƒ±yƒ± sustur
    reason = f"{interaction.user} tarafƒ±ndan susturuldu: {sebep}" if sebep else f"{interaction.user} tarafƒ±ndan susturuldu"
    
    try:
        # Timeout s√ºresi hesapla
        timeout_duration = datetime.timedelta(minutes=sure)
        await kullanici.timeout_for(timeout_duration, reason=reason)
        
        # Biti≈ü zamanƒ±nƒ± hesapla
        end_time = discord.utils.utcnow() + timeout_duration
        
        # Ba≈üarƒ±lƒ± timeout mesajƒ±
        embed = discord.Embed(
            title="üîá Kullanƒ±cƒ± Susturuldu",
            description=f"{kullanici.mention} {sure} dakika boyunca susturuldu.",
            color=discord.Color.orange()
        )
        embed.add_field(name="Sebep", value=sebep or "Sebep belirtilmedi", inline=False)
        embed.add_field(name="Biti≈ü Zamanƒ±", value=f"<t:{int(end_time.timestamp())}:R>", inline=False)
        embed.set_footer(text=f"{interaction.user} tarafƒ±ndan susturuldu")
        add_default_footer(embed)
        
        await interaction.response.send_message(embed=embed, ephemeral=False)
        
        # DM olarak bildirim g√∂ndermeye √ßalƒ±≈ü
        try:
            dm_embed = discord.Embed(
                title=f"üîá {interaction.guild.name} sunucusunda susturuldunuz",
                description=f"Yetkili: {interaction.user.mention}",
                color=discord.Color.orange()
            )
            dm_embed.add_field(name="Sebep", value=sebep or "Sebep belirtilmedi", inline=False)
            dm_embed.add_field(name="S√ºre", value=f"{sure} dakika", inline=False)
            dm_embed.add_field(name="Biti≈ü Zamanƒ±", value=f"<t:{int(end_time.timestamp())}:R>", inline=False)
            add_default_footer(dm_embed)
            
            await kullanici.send(embed=dm_embed)
        except:
            pass
        
    except discord.Forbidden:
        await interaction.response.send_message("Bu kullanƒ±cƒ±yƒ± susturmak i√ßin yeterli yetkiye sahip deƒüilim!", ephemeral=True)
    except Exception as e:
        await interaction.response.send_message(f"Bir hata olu≈ütu: {e}", ephemeral=True)

# Susturmayƒ± kaldƒ±rma komutu
@bot.tree.command(name="susturma_kaldir", description="Bir kullanƒ±cƒ±nƒ±n susturmasƒ±nƒ± kaldƒ±r")
@app_commands.describe(
    kullanici="Susturmasƒ± kaldƒ±rƒ±lacak kullanƒ±cƒ±",
    sebep="Susturma kaldƒ±rma sebebi (isteƒüe baƒülƒ±)"
)
@app_commands.default_permissions(moderate_members=True)
async def remove_timeout(interaction: discord.Interaction, kullanici: discord.Member, sebep: str = None):
    # Yetkili kontrol√º
    if kullanici.top_role >= interaction.user.top_role and interaction.user.id != interaction.guild.owner_id:
        await interaction.response.send_message("Bu kullanƒ±cƒ±nƒ±n susturmasƒ±nƒ± kaldƒ±rmak i√ßin yetkiniz yok! Sizden daha y√ºksek ya da aynƒ± yetkide.", ephemeral=True)
        return
    
    # Susturmayƒ± kaldƒ±r
    reason = f"{interaction.user} tarafƒ±ndan susturma kaldƒ±rƒ±ldƒ±: {sebep}" if sebep else f"{interaction.user} tarafƒ±ndan susturma kaldƒ±rƒ±ldƒ±"
    
    try:
        # ≈ûu anki susturmasƒ± var mƒ± kontrol et
        if kullanici.is_timed_out():
            await kullanici.timeout(None, reason=reason)
            
            # Ba≈üarƒ±lƒ± mesajƒ±
            embed = discord.Embed(
                title="üîä Susturma Kaldƒ±rƒ±ldƒ±",
                description=f"{kullanici.mention} kullanƒ±cƒ±sƒ±nƒ±n susturmasƒ± kaldƒ±rƒ±ldƒ±.",
                color=discord.Color.green()
            )
            embed.add_field(name="Sebep", value=sebep or "Sebep belirtilmedi", inline=False)
            embed.set_footer(text=f"{interaction.user} tarafƒ±ndan kaldƒ±rƒ±ldƒ±")
            add_default_footer(embed)
            
            await interaction.response.send_message(embed=embed, ephemeral=False)
            
            # DM olarak bildirim g√∂ndermeye √ßalƒ±≈ü
            try:
                dm_embed = discord.Embed(
                    title=f"üîä {interaction.guild.name} sunucusundaki susturmanƒ±z kaldƒ±rƒ±ldƒ±",
                    description=f"Yetkili: {interaction.user.mention}",
                    color=discord.Color.green()
                )
                dm_embed.add_field(name="Sebep", value=sebep or "Sebep belirtilmedi", inline=False)
                add_default_footer(dm_embed)
                
                await kullanici.send(embed=dm_embed)
            except:
                pass
            
        else:
            await interaction.response.send_message(f"{kullanici.mention} ≈üu anda susturulmamƒ±≈ü.", ephemeral=True)
        
    except discord.Forbidden:
        await interaction.response.send_message("Bu kullanƒ±cƒ±nƒ±n susturmasƒ±nƒ± kaldƒ±rmak i√ßin yeterli yetkiye sahip deƒüilim!", ephemeral=True)
    except Exception as e:
        await interaction.response.send_message(f"Bir hata olu≈ütu: {e}", ephemeral=True)

# Mesaj silme komutu
@bot.tree.command(name="temizle", description="Belirli sayƒ±da mesajƒ± sil")
@app_commands.describe(
    adet="Silinecek mesaj adedi (1-100)",
    kullanici="Sadece belirli bir kullanƒ±cƒ±nƒ±n mesajlarƒ±nƒ± sil (isteƒüe baƒülƒ±)"
)
@app_commands.default_permissions(manage_messages=True)
async def clear(interaction: discord.Interaction, adet: int, kullanici: discord.Member = None):
    # Adet kontrol√º
    if adet < 1 or adet > 100:
        await interaction.response.send_message("L√ºtfen 1 ile 100 arasƒ±nda bir deƒüer girin.", ephemeral=True)
        return
    
    # Mesajlarƒ± silme
    try:
        await interaction.response.defer(ephemeral=True)
        
        if kullanici:
            # Belirli bir kullanƒ±cƒ±nƒ±n mesajlarƒ±nƒ± sil
            def check(message):
                return message.author == kullanici
            
            deleted = await interaction.channel.purge(limit=adet, check=check)
            await interaction.followup.send(f"{len(deleted)} adet {kullanici.mention} tarafƒ±ndan g√∂nderilen mesaj silindi.", ephemeral=True)
        else:
            # T√ºm mesajlarƒ± sil
            deleted = await interaction.channel.purge(limit=adet)
            await interaction.followup.send(f"{len(deleted)} adet mesaj silindi.", ephemeral=True)
        
    except discord.Forbidden:
        await interaction.followup.send("Mesajlarƒ± silmek i√ßin yeterli yetkiye sahip deƒüilim!", ephemeral=True)
    except Exception as e:
        await interaction.followup.send(f"Bir hata olu≈ütu: {e}", ephemeral=True)

# Uyarƒ± komutu
@bot.tree.command(name="uyarƒ±", description="Bir kullanƒ±cƒ±ya uyarƒ± ver")
@app_commands.describe(
    kullanici="Uyarƒ±lacak kullanƒ±cƒ±",
    sebep="Uyarƒ± sebebi"
)
@app_commands.default_permissions(kick_members=True)
async def warn(interaction: discord.Interaction, kullanici: discord.Member, sebep: str):
    # Kendine uyarƒ± veremez
    if kullanici == interaction.user:
        await interaction.response.send_message("Kendinize uyarƒ± veremezsiniz!", ephemeral=True)
        return
    
    if kullanici.bot:
        await interaction.response.send_message("Botlara uyarƒ± veremezsiniz!", ephemeral=True)
        return
    
    # Yetkili kontrol√º
    if kullanici.top_role >= interaction.user.top_role and interaction.user.id != interaction.guild.owner_id:
        await interaction.response.send_message("Bu kullanƒ±cƒ±ya uyarƒ± vermek i√ßin yetkiniz yok! Sizden daha y√ºksek ya da aynƒ± yetkide.", ephemeral=True)
        return
    
    # Uyarƒ± mesajlarƒ±
    embed = discord.Embed(
        title="‚ö†Ô∏è Kullanƒ±cƒ± Uyarƒ±ldƒ±",
        description=f"{kullanici.mention} kullanƒ±cƒ±sƒ± uyarƒ±ldƒ±.",
        color=discord.Color.yellow()
    )
    embed.add_field(name="Sebep", value=sebep, inline=False)
    embed.set_footer(text=f"{interaction.user} tarafƒ±ndan uyarƒ±ldƒ±")
    add_default_footer(embed)
    
    await interaction.response.send_message(embed=embed, ephemeral=False)
    
    # DM olarak bildirim g√∂ndermeye √ßalƒ±≈ü
    try:
        dm_embed = discord.Embed(
            title=f"‚ö†Ô∏è {interaction.guild.name} sunucusunda uyarƒ± aldƒ±nƒ±z",
            description=f"Yetkili: {interaction.user.mention}",
            color=discord.Color.yellow()
        )
        dm_embed.add_field(name="Sebep", value=sebep, inline=False)
        add_default_footer(dm_embed)
        
        await kullanici.send(embed=dm_embed)
    except:
        await interaction.followup.send(f"{kullanici.mention} kullanƒ±cƒ±sƒ±na DM g√∂nderilemedi, mesajlarƒ± kapalƒ± olabilir.", ephemeral=True)

# Start the bot
if __name__ == "__main__":
    bot.run(config["token"]) 